version: '3.8'

services:
  manager-service:
    build: manager
    container_name: manager-service
    env_file: "./.env"
    ports:
      - "${MANAGER_PORT}:${MANAGER_PORT}"
    depends_on:
      rabbitmq:
        condition: service_healthy
#      mongo-db:
#        condition: service_healthy
      mongo-db-primary:
        condition: service_healthy
    networks:
      - crack-hash-network

  worker-service:
    build: worker
#    container_name: worker-service
    env_file: "./.env"
#    ports:
#      - "${WORKER_PORT}:${WORKER_PORT}"
    deploy:
      mode: replicated
      replicas: 2
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - crack-hash-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    hostname: rabbitmq
    env_file: "./.env"
    ports:
      - "${RABBITMQ_AMQP_PORT}:${RABBITMQ_AMQP_PORT}"              # AMQP
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}"  # Management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_PREFETCH_COUNT: 1
    healthcheck:
      test:  ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 15s
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - crack-hash-network

#  mongo-db:
#    image: mongo:latest
#    container_name: mongo-db
#    env_file: "./.env"
#    ports:
#      - '${MONGO_PORT}:${MONGO_PORT}'
#    healthcheck:
#      test: mongosh --eval 'db.runCommand("ping").ok' --quiet
#      interval: 15s
#      timeout: 10s
#      retries: 5
#      start_period: 15s
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
#      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
#    volumes:
#      - mongo-primary-data:/data/db
#      - mongo-primary-config:/data/configdb
#    networks:
#      - crack-hash-network

  mongo-db-primary:
    image: mongo:latest
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    container_name: mongo-db-primary
    ports:
      - 27017:27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo-db-primary:27017',priority:1},{_id:1,host:'mongo-db-secondary-1:30001',priority:0.5},{_id:2,host:'mongo-db-secondary-2:30002',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 20s
      retries: 20
    volumes:
      - mongo-primary-data:/data/db
      - mongo-primary-config:/data/configdb
    networks:
      - crack-hash-network

  mongo-db-secondary-1:
    image: mongo:latest
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "30001" ]
    container_name: mongo-db-secondary-1
    ports:
      - "30001:30001"
    volumes:
      - mongo-secondary-1-data:/data/db
      - mongo-secondary-1-config:/data/configdb
    networks:
      - crack-hash-network

  mongo-db-secondary-2:
    image: mongo:latest
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "30002" ]
    container_name: mongo-db-secondary-2
    ports:
      - "30002:30002"
    volumes:
      - mongo-secondary-2-data:/data/db
      - mongo-secondary-2-config:/data/configdb
    networks:
      - crack-hash-network


networks:
  crack-hash-network:
    driver: bridge

volumes:
  rabbitmq-data:
    driver: local
    name: "rabbitmq-data"
  mongo-primary-data:
    driver: local
    name: "mongo-primary-data"
  mongo-primary-config:
    driver: local
    name: "mongo-primary-config"
  mongo-secondary-1-data:
    driver: local
    name: "mongo-secondary-1-data"
  mongo-secondary-1-config:
    driver: local
    name: "mongo-secondary-1-config"
  mongo-secondary-2-data:
    driver: local
    name: "mongo-secondary-2-data"
  mongo-secondary-2-config:
    driver: local
    name: "mongo-secondary-2-config"
