version: '3.8'

services:
  manager-service:
    build: manager
    container_name: manager-service
    env_file: "./.env"
    ports:
      - "${MANAGER_PORT}:${MANAGER_PORT}"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
    networks:
      - crack-hash-network

  worker-service:
    build: worker
#    container_name: worker-service
    env_file: "./.env"
#    ports:
#      - "${WORKER_PORT}:${WORKER_PORT}"
    deploy:
      mode: replicated
      replicas: 2
    depends_on:
      rabbitmq:
        condition: service_healthy
      manager-service:
        condition: service_started
    networks:
      - crack-hash-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    env_file: "./.env"
    ports:
      - "${RABBITMQ_AMQP_PORT}:${RABBITMQ_AMQP_PORT}"              # AMQP
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}"  # Management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test:  ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 15s
    networks:
      - crack-hash-network

  mongo-db:
    image: mongo:latest
    container_name: mongo-db
    env_file: "./.env"
    ports:
      - '${MONGO_PORT}:${MONGO_PORT}'
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' --quiet
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 15s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - crack-hash-network


networks:
  crack-hash-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
    name: "mongo-data"
  mongo-config:
    driver: local
    name: "mongo-config"
